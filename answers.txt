Submission for Trevor Grabham and Kevin Grandham

1)  The code attempts to read Chunk bytes from the file described by fp and
    place them into the buffer. It will return and store in words, the number of
    bytes read on success and -1 on failure so we are checking if words is equal
    to -1 to see if any errors were encountered while trying to read from the
    file.

2)  The above is an example of a block read. That block will contain up to
    Chunk bytes. On success, words will contain the number of bytes read from
    the file. On failure the value of words will be -1. If the value of words is
    less than Chunk then it indicates that we have reached the EOF.

3)  The flag value is going to be a combination of the O_CREAT, O_WRONLY, and
    O_APPEND flags. This is achieved with the bitwise or operator |. This new
    flag will open the file in append mode, and will create a new file if the
    file does not already exist.

4)  Each function is measuring the amount of time taken to perform the function
    calls and the amount of cpu time used by the function calls.

5)  Bonnie measures the throughput when calculating the characters and blocks
    per second. It also measures the cpu usage which is neither throughput or
    latency.

6)  characters read is much slower than blocks read. I would assume that this
    would be the case due to the higher number of system calls required to
    write each character separately.

7)

9)  char b[255], dots[sizeof(b)];     // creates two character arrays, both of size 255
    int bytes_read, i;
    setup();                          // calls the setup function, creating the files that will be needed if they don't already exist
    quit_if(IOERR_INVALID_ARGS != file_read(HELLO_FILE, 0, b, 0));    // quits the test if we don't return an error when we try and test with buffer of len 0
    quit_if(IOERR_INVALID_ARGS !=
      file_read(HELLO_FILE, 0, NULL, sizeof(b)));   // quits if we don't return an error when we try and test with a NULL buffer
    quit_if(IOERR_INVALID_ARGS != file_read(HELLO_FILE, -1, b, sizeof(b)));   // quits if we don't return an error when we try and test with a negative offset
    quit_if(IOERR_INVALID_ARGS != file_read(NULL, 0, b, sizeof(b)));    // quits if we don't return an error when we try and test with a NULL path
    quit_if(IOERR_INVALID_PATH !=
      file_read(NO_SUCH_FILE, 0, b, sizeof(b)));    // quits if we do not return an error when we try and test with an incorrect path
    bytes_read = file_read(HELLO_FILE, 0, b, sizeof(b));    // properly supplies the arguments
    quit_if(bytes_read != 5);   // quits if we did not indicate that we read the proper number of bytes
    quit_if(strncmp("Hello", b, 5));    // quits if we didn't read the proper text from the file
    bytes_read = file_read(HELLO_FILE, 1, b, sizeof(b));    // reads the same file, but skips the first letter
    quit_if(bytes_read != 4);   // quits if we did not indicate that we read the proper number of bytes
    quit_if(strncmp("ello", b, 4));   // quits if we didn't read the proper text from the file
    bytes_read = file_read(HELLO_FILE, -1, b, sizeof(b));   // tests again with improper input (same as previous)
    quit_if(bytes_read >= 0);

    for (i = 0; i < sizeof(dots); i++) {
    b[i] = dots[i] = i == sizeof(dots) - 1 ? '\0' : '.';
    }

    bytes_read = file_read(BIG_FILE, 1, b, sizeof(b));    // reads from a file that is larger than the size of b
    quit_if(bytes_read!= sizeof(b) );     // quit if we didn't read as much as possible of the file
    quit_if(!memcmp(b, dots, sizeof(b)));   // try and copy dots into b and quit if there was an error
